#!/usr/bin/env python3
"""
Script de correction de la base de donn√©es pour la production (DEPRECI√â)
---------------------------------------------------------------------
Contexte: remplac√© progressivement par les migrations Alembic.
Objectif initial: corriger/renommer la colonne activites_musicales ‚Üí activites_realisees.
√Ä supprimer une fois que le d√©ploiement s'appuie exclusivement sur `flask db upgrade`.
"""
from contextlib import suppress
import os
import sys

from sqlalchemy import text  # type: ignore

from app import create_app  # type: ignore
from app.models import db  # type: ignore

def fix_database():
    """Corrige la structure de la base de donn√©es"""
    print("üîß Correction de la base de donn√©es Synchronie...")
    print(f"üåç Environnement: {os.environ.get('FLASK_CONFIG', 'default')}")
    
    # Utiliser la configuration de production
    config_name = os.environ.get('FLASK_CONFIG', 'production')
    app = create_app(config_name)
    
    with app.app_context():
        try:
            print("üìä V√©rification de la structure de la base...")
            
            # V√©rifier d'abord si la table seances existe
            tables_result = db.session.execute(text("""
                SELECT tablename FROM pg_tables 
                WHERE schemaname = 'public' AND tablename = 'seances'
            """))
            
            tables = [row[0] for row in tables_result]
            print(f"üìã Tables trouv√©es: {tables}")
            
            if 'seances' not in tables:
                print("‚ö†Ô∏è Table 'seances' n'existe pas, cr√©ation de toutes les tables...")
                db.create_all()
                print("‚úÖ Tables cr√©√©es avec succ√®s")
                return True
            
            # V√©rifier la colonne activites_realisees
            print("üîç V√©rification des colonnes de la table 'seances'...")
            result = db.session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name = 'seances'
                AND column_name IN ('activites_musicales', 'activites_realisees')
            """))
            
            columns = [row[0] for row in result]
            print(f"üìã Colonnes activites trouv√©es: {columns}")
            
            # Obtenir toutes les colonnes pour diagnostic
            all_columns_result = db.session.execute(text("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name = 'seances'
                ORDER BY ordinal_position
            """))
            
            all_columns = [(row[0], row[1]) for row in all_columns_result]
            print(f"üìã Toutes les colonnes de 'seances': {[col[0] for col in all_columns]}")
            
            # Corriger selon le cas
            if 'activites_musicales' in columns and 'activites_realisees' not in columns:
                print("üîÑ Renommage activites_musicales ‚Üí activites_realisees...")
                db.session.execute(text(
                    'ALTER TABLE seances RENAME COLUMN activites_musicales TO activites_realisees'
                ))
                db.session.commit()
                print("‚úÖ Migration de colonne r√©ussie!")
                
            elif 'activites_realisees' not in columns:
                print("‚ûï Ajout de la colonne activites_realisees...")
                db.session.execute(text(
                    'ALTER TABLE seances ADD COLUMN activites_realisees TEXT'
                ))
                db.session.commit()
                print("‚úÖ Colonne ajout√©e avec succ√®s!")
                
            else:
                print("‚úÖ La colonne activites_realisees existe d√©j√†")
            
            # V√©rification finale
            final_result = db.session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name = 'seances'
                AND column_name = 'activites_realisees'
            """))
            
            final_check = final_result.fetchone()
            if final_check:
                print("üéâ Base de donn√©es corrig√©e avec succ√®s!")
                print("‚úÖ Colonne 'activites_realisees' confirm√©e dans la table 'seances'")
                return True
            print("‚ùå La colonne activites_realisees est toujours manquante")
            return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la correction: {e}")
            print(f"üîç Type d'erreur: {type(e).__name__}")
            import traceback
            traceback.print_exc()
            with suppress(Exception):
                db.session.rollback()
            return False

if __name__ == "__main__":
    print("=" * 60)
    print("üöÄ SYNCHRONIE - SCRIPT DE CORRECTION DE BASE DE DONN√âES")
    print("=" * 60)
    
    success = fix_database()
    
    if success:
        print("\n" + "=" * 60)
        print("‚úÖ CORRECTION TERMIN√âE AVEC SUCC√àS")
        print("=" * 60)
        sys.exit(0)
    else:
        print("\n" + "=" * 60)
        print("‚ùå √âCHEC DE LA CORRECTION")
        print("=" * 60)
        sys.exit(1)
