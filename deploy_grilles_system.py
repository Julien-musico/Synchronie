#!/usr/bin/env python3
"""
Script de d√©ploiement du syst√®me de grilles de cotation.
√Ä ex√©cuter apr√®s le d√©ploiement pour initialiser le syst√®me de grilles.
"""

import os
import sys

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models.cotation import GrilleEvaluation
from app.services.cotation_service import CotationService


def deploy_grilles_system():
    """D√©ploie le syst√®me de grilles de cotation."""
    print("üéµ D√©ploiement du syst√®me de grilles Synchronie")
    print("=" * 50)
    
    app = create_app()
    
    with app.app_context():
        try:
            # 1. Cr√©er les tables si elles n'existent pas
            print("üìÅ Cr√©ation des tables...")
            db.create_all()
            print("‚úÖ Tables cr√©√©es avec succ√®s")
            
            # 2. V√©rifier que PatientGrille existe
            print("üîç V√©rification de la table PatientGrille...")
            inspector = db.inspect(db.engine)
            tables = inspector.get_table_names()
            
            if 'patient_grille' in tables:
                print("‚úÖ Table PatientGrille existe")
            else:
                print("‚ùå Table PatientGrille manquante")
                return False
            
            # 3. Cr√©er les grilles standards si elles n'existent pas
            print("üìã V√©rification des grilles standards...")
            grilles_existantes = GrilleEvaluation.query.filter_by(est_standard=True).count()
            
            if grilles_existantes == 0:
                print("üìù Cr√©ation des grilles standards...")
                
                # AMTA Standard
                CotationService.creer_grille_predefinie('amta')
                print("‚úÖ Grille AMTA cr√©√©e")
                
                # IMCAP-ND
                CotationService.creer_grille_predefinie('imcap_nd')
                print("‚úÖ Grille IMCAP-ND cr√©√©e")
                
                # Grille G√©riatrique
                CotationService.creer_grille_predefinie('geriatrique')
                print("‚úÖ Grille G√©riatrique cr√©√©e")
                
                # Grille P√©diatrique
                CotationService.creer_grille_predefinie('pediatrique')
                print("‚úÖ Grille P√©diatrique cr√©√©e")
                
                # √âvaluation Rapide
                CotationService.creer_grille_predefinie('evaluation_rapide')
                print("‚úÖ Grille √âvaluation Rapide cr√©√©e")
                
                print(f"‚úÖ {5} grilles standards cr√©√©es avec succ√®s")
            else:
                print(f"‚úÖ {grilles_existantes} grilles standards d√©j√† pr√©sentes")
            
            # 4. V√©rification finale
            print("üîç V√©rification finale...")
            total_grilles = GrilleEvaluation.query.count()
            grilles_standards = GrilleEvaluation.query.filter_by(est_standard=True).count()
            grilles_personnalisees = total_grilles - grilles_standards
            
            print("üìä Statistiques finales:")
            print(f"   ‚Ä¢ Total grilles: {total_grilles}")
            print(f"   ‚Ä¢ Grilles standards: {grilles_standards}")
            print(f"   ‚Ä¢ Grilles personnalis√©es: {grilles_personnalisees}")
            
            print("\nüéâ D√©ploiement du syst√®me de grilles termin√© avec succ√®s!")
            print("\nüìã Fonctionnalit√©s disponibles:")
            print("   ‚Ä¢ Gestion des grilles via /grilles")
            print("   ‚Ä¢ S√©lection de grilles √† la cr√©ation de patients")
            print("   ‚Ä¢ 5 grilles standards scientifiquement valid√©es")
            print("   ‚Ä¢ Cr√©ation de grilles personnalis√©es")
            print("   ‚Ä¢ Assignment de grilles multiples par patient")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du d√©ploiement: {e}")
            return False


if __name__ == "__main__":
    success = deploy_grilles_system()
    sys.exit(0 if success else 1)
