#!/usr/bin/env python3
"""
Script de migration pour corriger les probl√®mes de base de donn√©es
"""
import os
import psycopg2
from urllib.parse import urlparse

def execute_sql_patch():
    """Ex√©cute le patch SQL pour corriger la base de donn√©es"""
    
    # R√©cup√©rer l'URL de la base de donn√©es depuis les variables d'environnement
    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        print("‚ùå Variable DATABASE_URL non trouv√©e")
        return False
    
    # Parser l'URL de la base de donn√©es
    parsed = urlparse(database_url)
    
    try:
        # Connexion √† la base de donn√©es
        conn = psycopg2.connect(
            host=parsed.hostname,
            port=parsed.port,
            database=parsed.path[1:],  # Retirer le '/' initial
            user=parsed.username,
            password=parsed.password,
            sslmode='require'
        )
        
        print("‚úÖ Connexion √† la base de donn√©es √©tablie")
        
        # Lire le fichier de patch
        with open('sql/schema_patch.sql', 'r', encoding='utf-8') as f:
            sql_patch = f.read()
        
        # Ex√©cuter le patch
        with conn.cursor() as cursor:
            cursor.execute(sql_patch)
            conn.commit()
            print("‚úÖ Patch SQL ex√©cut√© avec succ√®s")
        
        # V√©rifier que les colonnes probl√©matiques ont √©t√© supprim√©es
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'cotation_seance' 
                AND column_name = 'grille_version_id'
            """)
            if cursor.fetchone():
                print("‚ö†Ô∏è La colonne grille_version_id existe encore dans cotation_seance")
            else:
                print("‚úÖ Colonne grille_version_id supprim√©e de cotation_seance")
        
        conn.close()
        return True
        
    except psycopg2.Error as e:
        print(f"‚ùå Erreur PostgreSQL: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

if __name__ == '__main__':
    print("üîß D√©but de la migration de base de donn√©es...")
    if execute_sql_patch():
        print("üéâ Migration termin√©e avec succ√®s!")
    else:
        print("üí• √âchec de la migration")
        exit(1)
