"""
Service de transcription audio et analyse IA pour Synchronie
Utilise OpenAI Whisper pour la transcription et GPT pour l'analyse
"""
import os
import tempfile
from typing import Optional, Tuple, Dict, Any
from werkzeug.datastructures import FileStorage
from openai import OpenAI
from app.models import db, Seance
import logging

logger = logging.getLogger(__name__)

class AudioTranscriptionService:
    """Service pour la transcription d'enregistrements audio de s√©ances"""
    
    # Formats audio support√©s
    ALLOWED_EXTENSIONS = {'mp3', 'wav', 'm4a', 'flac', 'ogg', 'webm'}
    MAX_FILE_SIZE = 25 * 1024 * 1024  # 25 MB (limite OpenAI Whisper)
    
    def __init__(self):
        """Initialise le service avec la cl√© API OpenAI"""
        api_key = os.environ.get('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("OPENAI_API_KEY n'est pas configur√©e")
        
        # Initialisation robuste du client OpenAI avec gestion compl√®te des probl√®mes de proxy
        self.client = None
        last_error = None
        
        # Strat√©gie 1: Initialisation standard
        try:
            import openai
            logger.info(f"Version OpenAI: {getattr(openai, '__version__', 'unknown')}")
            self.client = OpenAI(api_key=api_key)
            logger.info("‚úÖ Client OpenAI initialis√© avec succ√®s (m√©thode standard)")
            return
        except TypeError as e:
            last_error = e
            logger.warning(f"‚ö†Ô∏è Erreur de type lors de l'initialisation standard: {e}")
        except Exception as e:
            last_error = e
            logger.warning(f"‚ö†Ô∏è Erreur inattendue lors de l'initialisation standard: {e}")
        
        # Strat√©gie 2: Client HTTP personnalis√© sans proxy
        if 'proxies' in str(last_error) or 'unexpected keyword argument' in str(last_error):
            try:
                import httpx
                logger.info("üîÑ Tentative avec client HTTP personnalis√© (sans proxy)")
                
                # Cr√©er un client HTTP explicitement sans configuration de proxy
                http_client = httpx.Client(
                    timeout=30.0,
                    follow_redirects=True
                )
                self.client = OpenAI(api_key=api_key, http_client=http_client)
                logger.info("‚úÖ Client OpenAI initialis√© avec client HTTP personnalis√©")
                return
            except Exception as e2:
                last_error = e2
                logger.warning(f"‚ö†Ô∏è √âchec avec client HTTP personnalis√©: {e2}")
        
        # Strat√©gie 3: Variable d'environnement uniquement
        try:
            logger.info("üîÑ Tentative avec variable d'environnement uniquement")
            os.environ['OPENAI_API_KEY'] = api_key
            self.client = OpenAI()
            logger.info("‚úÖ Client OpenAI initialis√© via variable d'environnement")
            return
        except Exception as e3:
            last_error = e3
            logger.warning(f"‚ö†Ô∏è √âchec avec variable d'environnement: {e3}")
        
        # Strat√©gie 4: Client HTTP minimal
        try:
            import httpx
            logger.info("üîÑ Tentative avec client HTTP minimal")
            
            # Client HTTP le plus basique possible
            http_client = httpx.Client(
                timeout=httpx.Timeout(30.0),
                limits=httpx.Limits(max_keepalive_connections=5, max_connections=10)
            )
            self.client = OpenAI(api_key=api_key, http_client=http_client)
            logger.info("‚úÖ Client OpenAI initialis√© avec client HTTP minimal")
            return
        except Exception as e4:
            last_error = e4
            logger.warning(f"‚ö†Ô∏è √âchec avec client HTTP minimal: {e4}")
        
        # Si toutes les strat√©gies √©chouent
        logger.error("‚ùå Toutes les strat√©gies d'initialisation ont √©chou√©")
        logger.error(f"‚ùå Derni√®re erreur: {last_error}")
        raise ValueError(f"Impossible d'initialiser le client OpenAI apr√®s toutes les tentatives. Derni√®re erreur: {last_error}")
    
    @staticmethod
    def is_allowed_file(filename: str) -> bool:
        """V√©rifie si le fichier a une extension autoris√©e"""
        return ('.' in filename and 
                filename.rsplit('.', 1)[1].lower() in AudioTranscriptionService.ALLOWED_EXTENSIONS)
    
    @staticmethod
    def validate_audio_file(file: FileStorage) -> Tuple[bool, str]:
        """
        Valide un fichier audio upload√©
        
        Returns:
            Tuple[bool, str]: (is_valid, error_message)
        """
        if not file or not file.filename:
            return False, "Aucun fichier s√©lectionn√©"
        
        if not AudioTranscriptionService.is_allowed_file(file.filename):
            return False, f"Format non support√©. Formats autoris√©s: {', '.join(AudioTranscriptionService.ALLOWED_EXTENSIONS)}"
        
        # V√©rifier la taille (si possible)
        if hasattr(file, 'content_length') and file.content_length:
            if file.content_length > AudioTranscriptionService.MAX_FILE_SIZE:
                return False, "Fichier trop volumineux. Taille maximum: 25 MB"
        
        return True, ""
    
    def transcribe_audio(self, audio_file: FileStorage) -> Tuple[bool, str, Optional[str]]:
        """
        Transcrit un fichier audio en texte
        
        Args:
            audio_file: Fichier audio √† transcrire
            
        Returns:
            Tuple[bool, str, Optional[str]]: (success, message, transcription)
        """
        # V√©rifier que le client OpenAI est initialis√©
        if self.client is None:
            logger.error("Client OpenAI non initialis√©")
            return False, "Service de transcription non disponible", None
            
        try:
            # Validation du fichier
            is_valid, error_msg = self.validate_audio_file(audio_file)
            if not is_valid:
                return False, error_msg, None
            
            logger.info(f"D√©but de la transcription pour: {audio_file.filename}")
            
            # Cr√©er un fichier temporaire pour l'upload vers OpenAI
            filename = audio_file.filename or 'audio.mp3'
            with tempfile.NamedTemporaryFile(
                suffix=f".{filename.rsplit('.', 1)[1].lower()}", 
                delete=False
            ) as temp_file:
                
                # Sauvegarder le fichier temporairement
                audio_file.save(temp_file.name)
                temp_file_path = temp_file.name
            
            try:
                # Transcription avec Whisper - version simplifi√©e
                with open(temp_file_path, 'rb') as audio_data:
                    transcript = self.client.audio.transcriptions.create(
                        model="whisper-1",
                        file=audio_data,
                        language="fr",  # Fran√ßais
                        response_format="text"
                    )
                
                transcription_text = str(transcript) if transcript else ""
                logger.info(f"Transcription r√©ussie: {len(transcription_text)} caract√®res")
                
                return True, "Transcription r√©ussie", transcription_text
                
            finally:
                # Nettoyer le fichier temporaire
                try:
                    os.unlink(temp_file_path)
                except Exception as e:
                    logger.warning(f"Impossible de supprimer le fichier temporaire: {e}")
        
        except Exception as e:
            logger.error(f"Erreur lors de la transcription: {e}")
            return False, f"Erreur de transcription: {str(e)}", None
    
    def generate_session_analysis(self, transcription: str, patient_info: Dict[str, Any]) -> Tuple[bool, str, Optional[str]]:
        """
        G√©n√®re une analyse IA de la s√©ance √† partir de la transcription
        
        Args:
            transcription: Texte transcrit de la s√©ance
            patient_info: Informations sur le patient
            
        Returns:
            Tuple[bool, str, Optional[str]]: (success, message, analysis)
        """
        # V√©rifier que le client OpenAI est initialis√©
        if self.client is None:
            logger.error("Client OpenAI non initialis√©")
            return False, "Service d'analyse non disponible", None
            
        try:
            logger.info("G√©n√©ration de l'analyse IA de la s√©ance")
            
            # Prompt sp√©cialis√© pour l'analyse de musicoth√©rapie
            system_prompt = """Tu es un assistant sp√©cialis√© en musicoth√©rapie. Analyse cette transcription de s√©ance et g√©n√®re une synth√®se th√©rapeutique structur√©e.

La synth√®se doit inclure :
1. **Observations g√©n√©rales** - Ambiance et d√©roulement de la s√©ance
2. **Engagement du patient** - Niveau de participation et r√©ceptivit√©
3. **Moments significatifs** - R√©actions particuli√®res, progr√®s observ√©s
4. **Activit√©s musicales** - Instruments utilis√©s, pr√©f√©rences exprim√©es
5. **√âvolution √©motionnelle** - Changements d'humeur ou d'expression
6. **Recommandations** - Suggestions pour les prochaines s√©ances

Reste professionnel, bienveillant et utilise un vocabulaire appropri√© au domaine de la musicoth√©rapie."""
            
            user_prompt = f"""Informations du patient :
- Pr√©nom : {patient_info.get('prenom', 'Non renseign√©')}
- Pathologie : {patient_info.get('pathologie', 'Non renseign√©e')}
- Objectifs th√©rapeutiques : {patient_info.get('objectifs_therapeutiques', 'Non renseign√©s')}

Transcription de la s√©ance :
{transcription}

G√©n√®re une synth√®se th√©rapeutique d√©taill√©e de cette s√©ance de musicoth√©rapie."""
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=1000,
                temperature=0.3
            )
            
            analysis = response.choices[0].message.content or ""
            logger.info(f"Analyse IA g√©n√©r√©e: {len(analysis)} caract√®res")
            
            return True, "Analyse g√©n√©r√©e avec succ√®s", analysis
            
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration d'analyse: {e}")
            return False, f"Erreur d'analyse IA: {str(e)}", None
    
    def process_session_recording(self, audio_file: FileStorage, seance_id: int) -> Tuple[bool, str]:
        """
        Traite compl√®tement un enregistrement de s√©ance
        
        Args:
            audio_file: Fichier audio de la s√©ance
            seance_id: ID de la s√©ance √† mettre √† jour
            
        Returns:
            Tuple[bool, str]: (success, message)
        """
        try:
            # R√©cup√©rer la s√©ance
            seance = Seance.query.get(seance_id)
            if not seance:
                return False, "S√©ance non trouv√©e"
            
            # Transcription
            success, message, transcription = self.transcribe_audio(audio_file)
            if not success:
                return False, f"√âchec de la transcription: {message}"
            
            # Informations du patient pour l'analyse
            patient_info = {
                'prenom': seance.patient.prenom,
                'pathologie': seance.patient.pathologie,
                'objectifs_therapeutiques': seance.patient.objectifs_therapeutiques
            }
            
            # G√©n√©ration de l'analyse IA
            if transcription:  # V√©rifier que transcription n'est pas None
                success, message, analysis = self.generate_session_analysis(transcription, patient_info)
                if not success:
                    logger.warning(f"Analyse IA √©chou√©e: {message}")
                    analysis = "Analyse automatique non disponible"
            else:
                analysis = "Transcription non disponible pour l'analyse"
            
            # Mettre √† jour la s√©ance avec les r√©sultats
            seance.transcription_audio = transcription
            seance.synthese_ia = analysis
            # Ne pas sauvegarder le fichier audio, juste la transcription
            
            db.session.commit()
            
            logger.info(f"Traitement complet r√©ussi pour la s√©ance {seance_id}")
            return True, "Enregistrement trait√© avec succ√®s"
            
        except Exception as e:
            logger.error(f"Erreur lors du traitement de l'enregistrement: {e}")
            db.session.rollback()
            return False, f"Erreur de traitement: {str(e)}"
    
    @staticmethod
    def get_audio_info(file: FileStorage) -> Dict[str, Any]:
        """
        R√©cup√®re les informations d'un fichier audio
        
        Args:
            file: Fichier audio
            
        Returns:
            Dict contenant les informations du fichier
        """
        info: Dict[str, Any] = {
            'filename': file.filename,
            'content_type': file.content_type,
            'size': getattr(file, 'content_length', 0)
        }
        
        try:
            # V√©rifier que le nom de fichier existe
            if not file.filename:
                return info
                
            # Utiliser mutagen pour obtenir plus d'infos si possible
            try:
                from mutagen import File as MutagenFile  # type: ignore
            except ImportError:
                logger.warning("Mutagen non install√© - informations audio limit√©es")
                return info
            
            with tempfile.NamedTemporaryFile(
                suffix=f".{file.filename.rsplit('.', 1)[1].lower()}"
            ) as temp_file:
                file.save(temp_file.name)
                file.seek(0)  # Reset pour une utilisation ult√©rieure
                
                audio_file = MutagenFile(temp_file.name)  # type: ignore
                if audio_file and hasattr(audio_file, 'info'):  # type: ignore
                    info.update({
                        'duration': getattr(audio_file.info, 'length', 0),  # type: ignore
                        'bitrate': getattr(audio_file.info, 'bitrate', 0),  # type: ignore
                        'channels': getattr(audio_file.info, 'channels', 0)  # type: ignore
                    })
        
        except Exception as e:
            logger.warning(f"Impossible de lire les m√©tadonn√©es audio: {e}")
        
        return info
